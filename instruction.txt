目录结构resources
    static：静态资源(js css 图片 音频 视频)
    templates：模板文件(模板引擎freemarker thymeleaf，默认不支持jsp)
    application.properties：springboot的配置文件

springboot内置了tomcat，并且不需要打成war包再执行
可以在application.properties中对端口号等服务端信息进行配置

springboot将各个应用/三方框架 设置成了一个个"场景"starter，以后要用哪个，只需要引入哪个场景即可。
引入后，springboot会将该场景所需要的所有依赖自动注入

@SpringBootApplication：springboot的主配置类(约定优于配置)
    该注解包含：
        @SpringBootConfiguration：包含@Configuration(表示"配置类"：1.该类是一个配置类；2.加了@Configuration注解的类，会自动纳入spring
            IOC容器，类似@Component)
        @EnableAutoConfiguration：
            包含@AutoConfigurationPackage，开启自动配置的类型，使springboot可以自动配置(自己写的包/类)
                (可以找到@SpringBootApplication所在类的包，作用：就会将该包及其所有的子包纳入IOC容器)
                传统写法：com.netease.accidence手工写到scan扫描器中(即加入spring容器)
            @Import({AutoConfigurationImportSelector.class}) springboot在启动时，会根据META-INF/spring.factories(spring-boot-autoconfigure/2.1.1.RELEASE/spring-boot-autoconfigure-2.1.1.RELEASE.jar!/META-INF/spring.factories)找到相应的三方依赖，
                并将这些依赖引入本项目，并且自动配置。包含整个j2ee的三房依赖

            spring.xml springmvc.xml mybatis-config.xml

            总结：
                a.编写项目时，一般会对自己写的代码 以及 三方依赖 进行配置。但是springboot可以自动进行配置：
                    i:自己的代码，springboot通过@AutoConfigurationPackage自动帮我们配置；
                    ii:三方依赖 通过META-INF/spring.factories进行声明，然后通过@Import({AutoConfigurationImportSelector.class})开启使用
                    iii:如何自动装配：
                        研究org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration
                        通过观察该源码，发现：
                          @Configuration：标识此类是一个配置类、将此类纳入springIOC容器
                          @EnableConfigurationProperties({HttpProperties.class})：通过HttpProperties将编码设置为UTF_8
                              (即自动装配为UTF_8)，该注解提供了默认编码utf_8，并且提供了prefix+属性名 的方式，供开发者修改编码
                                如何修改编码？
                                    通过相关HttpEncodingProperties的 prefix+属性名 进行修改 [配置文件中，yml/properties]
                          @ConditionalOnWebApplication(
                              type = Type.SERVLET
                          )
                          @ConditionalOnClass({CharacterEncodingFilter.class})
                          @ConditionalOnProperty(
                              prefix = "spring.http.encoding",
                              value = {"enabled"},
                              matchIfMissing = true
                          )
                            当满足以上三个条件时，springboot才会自动装配该类
                  b.每一个XxxAutoConfiguration 都有很多条件@ConditionalOnXxx，当这些条件都满足时，则此配置自装配动生效。但是我们可以手动修改 自动装配的
                      配置信息：此时自动装配条件将会不满足，在XxxProperties文件中的 prefix.属性名=value
                      全局配置文件中的Key，来源于某个Properties文件中的 prefix + 属性名
                      如何知道springboot开启了哪些自动装配、禁止了哪些自动装配：
                        在application.properties中 debug=true
                        运行项目会有很多log
                            Positive matches列表标识springboot自动开启的装配
                            Negative matches列表标识springboot没有开启的装配
        @ComponentScan

日志
    日志框架： UCL JUL jboss-logging log4j log4j2 slf4j...
    springboot默认选用slf4j logback
    springboot默认帮我们配置好了日志，我们直接使用即可。

    日志级别
        TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF

        springboot默认日志级别是INFO，即INFO之后打印，之前不打印，也可以设置成其他的

    指定日志显示格式：
        这是默认的配置规则：/Users/dingzhaohua/apache-maven-3.6.0/repository/org/springframework/boot/spring-boot/2.1.1
        .RELEASE/spring-boot-2.1.1.RELEASE.jar!/org/springframework/boot/logging/logback/file-appender.xml

        官方文档：https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-logging

        日志显示在控制台中
            logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} %msg%n
        日志显示在文件中
            logging.pattern.file=%d{yyyy-MM-dd} ** [%thread] ** %-5level ** %logger{50} ** %msg%n

springboot开发web项目（静态资源html css js 图片...）
    springboot 是一个 jar包，因此 静态资源 就不是再存放到 webapps中， 存放在哪里？
        静态资源的存放路径通过org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration
        .WebMvcAutoConfigurationAdapter
        .addResourceHandlers 该方法 来指定：/webjars/**
            webjars官网：https://www.webjars.org/

         springboot将静态资源存入jar包中，引入：从Jar目录结构的webjars开始写: http://localhost:5678/cmd/webjars/jquery/3.3.1-1/jquery.js

        如何自己写 静态资源，如何放到springboot中？
            1.将自己写的静态资源 打包成 jar包，同上（目录结构要相同）
            2.推荐：springboot约定：springboot将一些目录结构设置成 静态资源存放目录，我们的静态资源直接放入这些目录中即可。这目录在哪里？
                org.springframework.boot.autoconfigure.web.ResourceProperties
                    private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
                    			"classpath:/META-INF/resources/", "classpath:/resources/",
                    			"classpath:/static/", "classpath:/public/" };

                注意：在以上目录存放资源文件后，访问时，不需要添加前缀。http://localhost:5678/cmd/hello.html

                classpath 类路径：Project Setting -> Facets -> Web -> Source Roots列表

                设置欢迎页：就是直接输入域名进入到一个页面
                    org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.welcomePageHandlerMapping
                    getWelcomePage()
                    getIndexHtml return this.resourceLoader.getResource(location + "index.html");

          网站中 网页标签的logo是固定名字：favicon.ico
          自定义 favicon.ico ：
            org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.FaviconConfiguration.faviconHandlerMapping
            faviconRequestHandler()
            resolveFaviconLocations()
            getStaticLocations()
            this.staticLocations;
            private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;
            # 静态资源目录
            private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
            			"classpath:/META-INF/resources/", "classpath:/resources/",
            			"classpath:/static/", "classpath:/public/" };

            从源码中可以看出：把自定义的favicon.ico，放到任何一个静态资源目录中即可
            并配合index.html
                <head>
                    <meta charset="UTF-8">
                    <link rel="shortcut icon" href="favicon.ico">
                    <title>Title</title>
                </head>

    自定义静态资源文件位置：
        org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.addResourceHandlers
        this.resourceProperties
        ResourceProperties
        @ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)

        在配置文件中，自定义，自动配置的静态资源文件位置就会失效
        spring:
          profiles:
            active: dev
          resources:
            static-locations: classpath:/res/, classpath:/img/
            运行时：控制台日志也显示咯：
                Adding welcome page: class path resource [res/index.html]

    动态资源：JSP（springboot默认不支持），推荐使用模板引擎
        thymeleaf

        网页 = 模板 + 数据

     引入thymeleaf：
        到官网查询 thymeleaf 的依赖
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
            </dependency>
            <dependency>
                <groupId>org.thymeleaf</groupId>
                <artifactId>thymeleaf-spring5</artifactId>
            </dependency>
            <dependency>
                <groupId>org.thymeleaf.extras</groupId>
                <artifactId>thymeleaf-extras-java8time</artifactId>
            </dependency>

    使用thymeleaf: 代码在那里写？？？
        找到ThymeleafAutoConfiguration：org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration
        找到ThymeleafProperties：在该类中 找到 @EnableConfigurationProperties(ThymeleafProperties.class)
            @ConfigurationProperties(prefix = "spring.thymeleaf")
            public class ThymeleafProperties {
                private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;

                public static final String DEFAULT_PREFIX = "classpath:/templates/";

                public static final String DEFAULT_SUFFIX = ".html";
            }

    通过以上方式去查看源码得知：
        1.使用thymeleaf只需要 将 文件放入目录：classpath:/templates/***.html 中即可
        2.查看thymeleaf官网：https://www.thymeleaf.org/


